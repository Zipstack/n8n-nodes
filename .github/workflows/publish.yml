name: Release Tag and Publish Package

on:
  # Manual trigger with version bump input
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      pre_release:
        description: "Create as pre-release"
        required: false
        default: false
        type: boolean
      release_notes:
        description: "Release notes (optional)"
        required: false
        type: string

jobs:
  release-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.PUSH_TO_MAIN_APP_ID }}
          private-key: ${{ secrets.PUSH_TO_MAIN_APP_PRIVATE_KEY }}
          owner: Zipstack
          repositories: |
            n8n-nodes

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}
          fetch-depth: 0

      # Configure git for commits
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          registry-url: "https://registry.npmjs.org"

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Handle workflow_dispatch (manual trigger)
      - name: Bump version and create release
        if: github.event_name == 'workflow_dispatch'
        id: create_release
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump version based on input
          NEW_VERSION=$(npm version ${{ github.event.inputs.version_bump }} --no-git-tag-version)
          NEW_VERSION=${NEW_VERSION#v}  # Remove 'v' prefix
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Commit version changes
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin main

          # Create git tag
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

          # Create GitHub release with auto-generated notes only
          gh release create "v$NEW_VERSION" \
            --title "Release v$NEW_VERSION" \
            --generate-notes \
            ${{ github.event.inputs.pre_release == 'true' && '--prerelease' || '' }}

          echo "Created release v$NEW_VERSION with auto-generated release notes"
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      # Set version for subsequent steps
      - name: Set version output
        id: version
        run: |
          echo "version=${{ steps.create_release.outputs.version }}" >> $GITHUB_OUTPUT

      # Verify the version was updated correctly
      - name: Verify version update
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Package.json version: $PACKAGE_VERSION"
          echo "Target version: ${{ steps.version.outputs.version }}"
          if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "Version mismatch! Exiting..."
            exit 1
          fi

      # Build the package
      - name: Build package
        run: npm run build

      # Run linting
      - name: Run linting
        run: npm run lint

      # Publish to npm
      - name: Publish to NPM
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}

      # Output success message
      - name: Success message
        run: |
          echo "âœ… Successfully published version ${{ steps.version.outputs.version }} to NPM"
          echo "ðŸš€ Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}"
          echo "ðŸ“¦ NPM: https://www.npmjs.com/package/n8n-nodes-unstract/v/${{ steps.version.outputs.version }}"
